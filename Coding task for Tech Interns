   # Install the necessary dependencies:

bash

npm install express mongoose body-parser cors

    # Create a tournament model in a file named Tournament.js:

javascript

const mongoose = require('mongoose');

const tournamentSchema = new mongoose.Schema({
  name: { type: String, required: true },
  startDate: { type: Date, required: true },
  endDate: { type: Date, required: true },
  participants: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Participant' }],
  status: { type: String, default: 'Upcoming' },
});

const Tournament = mongoose.model('Tournament', tournamentSchema);

module.exports = Tournament;

    Create a participant model in a file named Participant.js:

javascript

const mongoose = require('mongoose');

const participantSchema = new mongoose.Schema({
  name: { type: String, required: true },
  // Additional properties for participant
  // (e.g. contact information, rank, status, etc.)
});

const Participant = mongoose.model('Participant', participantSchema);

module.exports = Participant;

   # Create REST API endpoints in a file named tournaments.js to handle CRUD operations for tournaments and participants:

javascript

const express = require('express');
const router = express.Router();
const Tournament = require('../models/Tournament');
const Participant = require('../models/Participant');

// Create a new tournament
router.post('/', async (req, res) => {
  try {
    const { name, startDate, endDate } = req.body;
    const tournament = await Tournament.create({ name, startDate, endDate });
    res.status(201).json(tournament);
  } catch (err) {
    res.status(500).json({ error: 'Failed to create tournament' });
  }
});

// Get all tournaments
router.get('/', async (req, res) => {
  try {
    const tournaments = await Tournament.find().populate('participants');
    res.status(200).json(tournaments);
  } catch (err) {
    res.status(500).json({ error: 'Failed to get tournaments' });
  }
});

// Get a tournament by ID
router.get('/:id', async (req, res) => {
  try {
    const tournament = await Tournament.findById(req.params.id).populate('participants');
    if (!tournament) {
      return res.status(404).json({ error: 'Tournament not found' });
    }
    res.status(200).json(tournament);
  } catch (err) {
    res.status(500).json({ error: 'Failed to get tournament' });
  }
});

// Update a tournament by ID
router.put('/:id', async (req, res) => {
  try {
    const { name, startDate, endDate, participants, status } = req.body;
    const tournament = await Tournament.findByIdAndUpdate(
      req.params.id,
      { name, startDate, endDate, participants, status },
      { new: true }
    );
    if (!tournament) {
      return res.status(404).json({ error: 'Tournament not found' });
    }
    res.status(200).json(tournament);
  } catch (err) {
    res.status(500).json({ error: 'Failed to update tournament' });
  }
});

// Delete a tournament by ID
router.delete('/:id', async (req, res) => {
  try {
    const tournament = await Tournament.findByIdAndDelete(req.params.id);
    if (!tournament) {
      return res.status(404).json
